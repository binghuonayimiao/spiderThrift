/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "spiderDownloadInfo_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




SpiderDownloadInfo::~SpiderDownloadInfo() noexcept {
}


void SpiderDownloadInfo::__set_name(const std::string& val) {
  this->name = val;
}

void SpiderDownloadInfo::__set_opt(const std::string& val) {
  this->opt = val;
__isset.opt = true;
}
std::ostream& operator<<(std::ostream& out, const SpiderDownloadInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SpiderDownloadInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->opt);
          this->__isset.opt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SpiderDownloadInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SpiderDownloadInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.opt) {
    xfer += oprot->writeFieldBegin("opt", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->opt);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SpiderDownloadInfo &a, SpiderDownloadInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.opt, b.opt);
  swap(a.__isset, b.__isset);
}

SpiderDownloadInfo::SpiderDownloadInfo(const SpiderDownloadInfo& other0) {
  name = other0.name;
  opt = other0.opt;
  __isset = other0.__isset;
}
SpiderDownloadInfo& SpiderDownloadInfo::operator=(const SpiderDownloadInfo& other1) {
  name = other1.name;
  opt = other1.opt;
  __isset = other1.__isset;
  return *this;
}
void SpiderDownloadInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SpiderDownloadInfo(";
  out << "name=" << to_string(name);
  out << ", " << "opt="; (__isset.opt ? (out << to_string(opt)) : (out << "<null>"));
  out << ")";
}


