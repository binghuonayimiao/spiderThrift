/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Spider_H
#define Spider_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "spiderDownloadInfo_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SpiderIf {
 public:
  virtual ~SpiderIf() {}
  virtual void writeInfo(const SpiderDownloadInfo& s) = 0;
};

class SpiderIfFactory {
 public:
  typedef SpiderIf Handler;

  virtual ~SpiderIfFactory() {}

  virtual SpiderIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SpiderIf* /* handler */) = 0;
};

class SpiderIfSingletonFactory : virtual public SpiderIfFactory {
 public:
  SpiderIfSingletonFactory(const ::std::shared_ptr<SpiderIf>& iface) : iface_(iface) {}
  virtual ~SpiderIfSingletonFactory() {}

  virtual SpiderIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SpiderIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SpiderIf> iface_;
};

class SpiderNull : virtual public SpiderIf {
 public:
  virtual ~SpiderNull() {}
  void writeInfo(const SpiderDownloadInfo& /* s */) {
    return;
  }
};

typedef struct _Spider_writeInfo_args__isset {
  _Spider_writeInfo_args__isset() : s(false) {}
  bool s :1;
} _Spider_writeInfo_args__isset;

class Spider_writeInfo_args {
 public:

  Spider_writeInfo_args(const Spider_writeInfo_args&);
  Spider_writeInfo_args& operator=(const Spider_writeInfo_args&);
  Spider_writeInfo_args() {
  }

  virtual ~Spider_writeInfo_args() noexcept;
  SpiderDownloadInfo s;

  _Spider_writeInfo_args__isset __isset;

  void __set_s(const SpiderDownloadInfo& val);

  bool operator == (const Spider_writeInfo_args & rhs) const
  {
    if (!(s == rhs.s))
      return false;
    return true;
  }
  bool operator != (const Spider_writeInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spider_writeInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spider_writeInfo_pargs {
 public:


  virtual ~Spider_writeInfo_pargs() noexcept;
  const SpiderDownloadInfo* s;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spider_writeInfo_result {
 public:

  Spider_writeInfo_result(const Spider_writeInfo_result&);
  Spider_writeInfo_result& operator=(const Spider_writeInfo_result&);
  Spider_writeInfo_result() {
  }

  virtual ~Spider_writeInfo_result() noexcept;

  bool operator == (const Spider_writeInfo_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Spider_writeInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Spider_writeInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Spider_writeInfo_presult {
 public:


  virtual ~Spider_writeInfo_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SpiderClient : virtual public SpiderIf {
 public:
  SpiderClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SpiderClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void writeInfo(const SpiderDownloadInfo& s);
  void send_writeInfo(const SpiderDownloadInfo& s);
  void recv_writeInfo();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SpiderProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SpiderIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SpiderProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_writeInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SpiderProcessor(::std::shared_ptr<SpiderIf> iface) :
    iface_(iface) {
    processMap_["writeInfo"] = &SpiderProcessor::process_writeInfo;
  }

  virtual ~SpiderProcessor() {}
};

class SpiderProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SpiderProcessorFactory(const ::std::shared_ptr< SpiderIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SpiderIfFactory > handlerFactory_;
};

class SpiderMultiface : virtual public SpiderIf {
 public:
  SpiderMultiface(std::vector<std::shared_ptr<SpiderIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SpiderMultiface() {}
 protected:
  std::vector<std::shared_ptr<SpiderIf> > ifaces_;
  SpiderMultiface() {}
  void add(::std::shared_ptr<SpiderIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void writeInfo(const SpiderDownloadInfo& s) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeInfo(s);
    }
    ifaces_[i]->writeInfo(s);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SpiderConcurrentClient : virtual public SpiderIf {
 public:
  SpiderConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SpiderConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void writeInfo(const SpiderDownloadInfo& s);
  int32_t send_writeInfo(const SpiderDownloadInfo& s);
  void recv_writeInfo(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
