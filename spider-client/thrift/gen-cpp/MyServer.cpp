// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Spider.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "../../src/spiderHandler.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

class SpiderHandler : virtual public SpiderIf {
 public:
  SpiderHandler() {
    // Your initialization goes here
  }

  void writeInfo(const SpiderDownloadInfo& s) {
    // Your implementation goes here
    writeStrToRedis(s.name);
  }

};

void thriftStart() {
  int port = 9090;
  ::std::shared_ptr<SpiderHandler> handler(new SpiderHandler());
  ::std::shared_ptr<TProcessor> processor(new SpiderProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
}

